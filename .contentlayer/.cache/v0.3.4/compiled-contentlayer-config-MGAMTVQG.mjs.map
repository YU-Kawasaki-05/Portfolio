{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\r\n\r\nexport const Work = defineDocumentType(() => ({\r\n  name: 'Work',\r\n  filePathPattern: `works/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    slug: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    title: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: 'date',\r\n      required: true,\r\n    },\r\n    excerpt: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    cover: {\r\n      type: 'string',\r\n      required: false,\r\n    },\r\n    tags: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      default: [],\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: 'string',\r\n      resolve: (work) => `/portfolio/${work.slug}`,\r\n    },\r\n  },\r\n}))\r\n\r\nexport const Blog = defineDocumentType(() => ({\r\n  name: 'Blog',\r\n  filePathPattern: `blog/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    slug: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    title: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: 'date',\r\n      required: true,\r\n    },\r\n    excerpt: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    cover: {\r\n      type: 'string',\r\n      required: false,\r\n    },\r\n    tags: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      default: [],\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: 'string',\r\n      resolve: (blog) => `/blog/${blog.slug}`,\r\n    },\r\n  },\r\n}))\r\n\r\nexport default makeSource({\r\n  contentDirPath: 'content',\r\n  documentTypes: [Work, Blog],\r\n}) "],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAExC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,SAAS,CAAC;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,cAAc,KAAK,IAAI;AAAA,IAC5C;AAAA,EACF;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,SAAS,CAAC;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,SAAS,KAAK,IAAI;AAAA,IACvC;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,IAAI;AAC5B,CAAC;",
  "names": []
}
