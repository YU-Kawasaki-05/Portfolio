{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\r\n\r\n// Works (\u5B9F\u7E3E\u30FB\u30DD\u30FC\u30C8\u30D5\u30A9\u30EA\u30AA) \u30C9\u30AD\u30E5\u30E1\u30F3\u30C8\u30BF\u30A4\u30D7\r\nexport const Work = defineDocumentType(() => ({\r\n  name: 'Work',\r\n  filePathPattern: 'works/**/*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      description: '\u5B9F\u7E3E\u30FB\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u30BF\u30A4\u30C8\u30EB',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      description: '\u7C21\u6F54\u306A\u8AAC\u660E\u6587\uFF08\u8868\u30D3\u30E5\u30FC\u7528\uFF09',\r\n      required: true,\r\n    },\r\n    year: {\r\n      type: 'number',\r\n      description: '\u5E74\u5EA6',\r\n      required: true,\r\n    },\r\n    month: {\r\n      type: 'number',\r\n      description: '\u6708',\r\n      required: true,\r\n    },\r\n    category: {\r\n      type: 'enum',\r\n      options: ['web', 'mobile', 'design', 'research', 'other'],\r\n      description: '\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u30AB\u30C6\u30B4\u30EA',\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      description: '\u6280\u8853\u30B9\u30BF\u30C3\u30AF\u30FB\u30BF\u30B0',\r\n      required: true,\r\n    },\r\n    status: {\r\n      type: 'enum',\r\n      options: ['completed', 'ongoing', 'archived'],\r\n      description: '\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u72B6\u6CC1',\r\n      default: 'completed',\r\n    },\r\n    url: {\r\n      type: 'string',\r\n      description: '\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8URL\uFF08\u4EFB\u610F\uFF09',\r\n      required: false,\r\n    },\r\n    github: {\r\n      type: 'string',\r\n      description: 'GitHub\u30EA\u30DD\u30B8\u30C8\u30EAURL\uFF08\u4EFB\u610F\uFF09',\r\n      required: false,\r\n    },\r\n    image: {\r\n      type: 'string',\r\n      description: '\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u753B\u50CF\u30D1\u30B9',\r\n      required: false,\r\n    },\r\n    featured: {\r\n      type: 'boolean',\r\n      description: '\u6CE8\u76EE\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u30D5\u30E9\u30B0',\r\n      default: false,\r\n    },\r\n    publishedAt: {\r\n      type: 'date',\r\n      description: '\u516C\u958B\u65E5',\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (doc) => doc._raw.flattenedPath.replace('works/', ''),\r\n    },\r\n    slugAsParams: {\r\n      type: 'string',\r\n      resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\r\n    },\r\n    dateFormatted: {\r\n      type: 'string',\r\n      resolve: (doc) => `${doc.year}.${doc.month.toString().padStart(2, '0')}`,\r\n    },\r\n    fullDate: {\r\n      type: 'string',\r\n      resolve: (doc) => new Date(doc.publishedAt).toISOString(),\r\n    },\r\n  },\r\n}));\r\n\r\n// Blog \u30C9\u30AD\u30E5\u30E1\u30F3\u30C8\u30BF\u30A4\u30D7\r\nexport const Blog = defineDocumentType(() => ({\r\n  name: 'Blog',\r\n  filePathPattern: 'blog/**/*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      description: '\u30D6\u30ED\u30B0\u8A18\u4E8B\u30BF\u30A4\u30C8\u30EB',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      description: '\u30D6\u30ED\u30B0\u8A18\u4E8B\u306E\u6982\u8981',\r\n      required: true,\r\n    },\r\n    publishedAt: {\r\n      type: 'date',\r\n      description: '\u516C\u958B\u65E5',\r\n      required: true,\r\n    },\r\n    updatedAt: {\r\n      type: 'date',\r\n      description: '\u66F4\u65B0\u65E5\uFF08\u4EFB\u610F\uFF09',\r\n      required: false,\r\n    },\r\n    category: {\r\n      type: 'enum',\r\n      options: ['tech', 'design', 'career', 'personal', 'tutorial'],\r\n      description: '\u30D6\u30ED\u30B0\u30AB\u30C6\u30B4\u30EA',\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      description: '\u30D6\u30ED\u30B0\u30BF\u30B0',\r\n      required: true,\r\n    },\r\n    featured: {\r\n      type: 'boolean',\r\n      description: '\u6CE8\u76EE\u8A18\u4E8B\u30D5\u30E9\u30B0',\r\n      default: false,\r\n    },\r\n    image: {\r\n      type: 'string',\r\n      description: '\u30A2\u30A4\u30AD\u30E3\u30C3\u30C1\u753B\u50CF\u30D1\u30B9',\r\n      required: false,\r\n    },\r\n    readingTime: {\r\n      type: 'number',\r\n      description: '\u63A8\u5B9A\u8AAD\u4E86\u6642\u9593\uFF08\u5206\uFF09',\r\n      required: false,\r\n    },\r\n    published: {\r\n      type: 'boolean',\r\n      description: '\u516C\u958B\u72B6\u614B',\r\n      default: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (doc) => doc._raw.flattenedPath.replace('blog/', ''),\r\n    },\r\n    slugAsParams: {\r\n      type: 'string',\r\n      resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\r\n    },\r\n    dateFormatted: {\r\n      type: 'string',\r\n      resolve: (doc) => new Date(doc.publishedAt).toLocaleDateString('ja-JP', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n      }),\r\n    },\r\n    fullDate: {\r\n      type: 'string',\r\n      resolve: (doc) => new Date(doc.publishedAt).toISOString(),\r\n    },\r\n  },\r\n}));\r\n\r\n// Contentlayer\u8A2D\u5B9A\r\nexport default makeSource({\r\n  contentDirPath: './content',\r\n  documentTypes: [Work, Blog],\r\n  disableImportAliasWarning: true, // Windows\u8B66\u544A\u3092\u7121\u52B9\u5316\r\n  mdx: {\r\n    remarkPlugins: [],\r\n    rehypePlugins: [],\r\n  },\r\n  onSuccess: async (importData) => {\r\n    console.log('\u2705 Contentlayer: \u30C9\u30AD\u30E5\u30E1\u30F3\u30C8\u751F\u6210\u5B8C\u4E86');\r\n    try {\r\n      const { allWorks, allBlogs } = await importData();\r\n      console.log(`\uD83D\uDCC4 Works: ${allWorks.length}\u4EF6`);\r\n      console.log(`\uD83D\uDCDD Blogs: ${allBlogs.length}\u4EF6`);\r\n    } catch (error) {\r\n      console.warn('\u26A0\uFE0F \u30C7\u30FC\u30BF\u8AAD\u307F\u8FBC\u307F\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u304C\u3001\u7D9A\u884C\u3057\u307E\u3059');\r\n    }\r\n  },\r\n}); "],
  "mappings": "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",
  "names": []
}
